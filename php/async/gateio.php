<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\Precise;

class gateio extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'gateio',
            'name' => 'Gate.io',
            'countries' => array( 'KR' ),
            'rateLimit' => 10 / 3, // 300 requests per second or 3.33ms
            'version' => '4',
            'certified' => true,
            'pro' => true,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',
                'doc' => 'https://www.gate.io/docs/apiv4/en/index.html',
                'www' => 'https://gate.io/',
                'api' => array(
                    'public' => 'https://api.gateio.ws/api/v4',
                    'private' => 'https://api.gateio.ws/api/v4',
                ),
                'referral' => array(
                    'url' => 'https://www.gate.io/ref/2436035',
                    'discount' => 0.2,
                ),
            ),
            'has' => array(
                'cancelOrder' => true,
                'createMarketOrder' => false,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposits' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchWithdrawals' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'api' => array(
                'public' => array(
                    'spot' => array(
                        'get' => array(
                            'currencies' => 1,
                            'currencies/{currency}' => 1,
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'tickers' => 1,
                            'order_book' => 1,
                            'trades' => 1,
                            'candlesticks' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'currency_pairs' => 1,
                            'currency_pairs/{currency_pair}' => 1,
                            'cross/currencies' => 1,
                            'cross/currencies/{currency}' => 1,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/funding_rate' => 1.5,
                            '{settle}/insurance' => 1.5,
                            '{settle}/contract_stats' => 1.5,
                            '{settle}/liq_orders' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/contracts' => 1.5,
                            '{settle}/contracts/{contract}' => 1.5,
                            '{settle}/order_book' => 1.5,
                            '{settle}/trades' => 1.5,
                            '{settle}/candlesticks' => 1.5,
                            '{settle}/tickers' => 1.5,
                            '{settle}/insurance' => 1.5,
                        ),
                    ),
                ),
                'private' => array(
                    'withdrawals' => array(
                        'post' => array(
                            '' => 3000, // 3000 = 10 seconds
                        ),
                        'delete' => array(
                            '{withdrawal_id}' => 300,
                        ),
                    ),
                    'wallet' => array(
                        'get' => array(
                            'deposit_address' => 300,
                            'withdrawals' => 300,
                            'deposits' => 300,
                            'sub_account_transfers' => 300,
                            'withdraw_status' => 300,
                            'sub_account_balances' => 300,
                            'fee' => 300,
                        ),
                        'post' => array(
                            'transfers' => 300,
                            'sub_account_transfers' => 300,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'accounts' => 1,
                            'open_orders' => 1,
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'my_trades' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                        'post' => array(
                            'batch_orders' => 1,
                            'orders' => 1,
                            'cancel_batch_orders' => 1,
                            'price_orders' => 1,
                        ),
                        'delete' => array(
                            'orders' => 1,
                            'orders/{order_id}' => 1,
                            'price_orders' => 1,
                            'price_orders/{order_id}' => 1,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'accounts' => 1.5,
                            'account_book' => 1.5,
                            'funding_accounts' => 1.5,
                            'loans' => 1.5,
                            'loans/{loan_id}' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'loan_records' => 1.5,
                            'loan_records/{load_record_id}' => 1.5,
                            'auto_repay' => 1.5,
                            'transferable' => 1.5,
                            'cross/accounts' => 1.5,
                            'cross/account_book' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/{loan_id}' => 1.5,
                            'cross/loans/repayments' => 1.5,
                            'cross/transferable' => 1.5,
                        ),
                        'post' => array(
                            'loans' => 1.5,
                            'merged_loans' => 1.5,
                            'loans/{loan_id}/repayment' => 1.5,
                            'auto_repay' => 1.5,
                            'cross/loans' => 1.5,
                            'cross/loans/repayments' => 1.5,
                        ),
                        'patch' => array(
                            'loans/{loan_id}' => 1.5,
                            'loan_records/{loan_record_id}' => 1.5,
                        ),
                        'delete' => array(
                            'loans/{loan_id}' => 1.5,
                        ),
                    ),
                    'futures' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/dual_mode' => 1.5,
                            '{settle}/dual_comp/positions/{contract}' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/margin' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/leverage' => 1.5,
                            '{settle}/dual_comp/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/price_orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                    'delivery' => array(
                        'get' => array(
                            '{settle}/accounts' => 1.5,
                            '{settle}/account_book' => 1.5,
                            '{settle}/positions' => 1.5,
                            '{settle}/positions/{contract}' => 1.5,
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/my_trades' => 1.5,
                            '{settle}/position_close' => 1.5,
                            '{settle}/liquidates' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                        'post' => array(
                            '{settle}/positions/{contract}/margin' => 1.5,
                            '{settle}/positions/{contract}/leverage' => 1.5,
                            '{settle}/positions/{contract}/risk_limit' => 1.5,
                            '{settle}/orders' => 1.5,
                        ),
                        'delete' => array(
                            '{settle}/orders' => 1.5,
                            '{settle}/orders/{order_id}' => 1.5,
                            '{settle}/price_orders' => 1.5,
                            '{settle}/price_orders/{order_id}' => 1.5,
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '10s' => '10s',
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '8h' => '8h',
                '1d' => '1d',
                '7d' => '7d',
            ),
            // copied from gateiov2
            'commonCurrencies' => array(
                '88MPH' => 'MPH',
                'BIFI' => 'Bitcoin File',
                'BOX' => 'DefiBox',
                'BTCBEAR' => 'BEAR',
                'BTCBULL' => 'BULL',
                'BYN' => 'Beyond Finance',
                'GTC' => 'Game.com', // conflict with Gitcoin and Gastrocoin
                'GTC_HT' => 'Game.com HT',
                'GTC_BSC' => 'Game.com BSC',
                'HIT' => 'HitChain',
                'MPH' => 'Morpher', // conflict with 88MPH
                'RAI' => 'Rai Reflex Index', // conflict with RAI Finance
                'SBTC' => 'Super Bitcoin',
                'TNC' => 'Trinity Network Credit',
                'TON' => 'TONToken',
                'VAI' => 'VAIOT',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'options' => array(
                'networks' => array(
                    'TRC20' => 'TRX',
                    'ERC20' => 'ETH',
                    'BEP20' => 'BSC',
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'margin' => 'margin',
                    'futures' => 'futures',
                    'delivery' => 'delivery',
                ),
                'defaultType' => 'spot',
                'swap' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
                'futures' => array(
                    'fetchMarkets' => array(
                        'settlementCurrencies' => array( 'usdt', 'btc' ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'feeSide' => 'get',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                    'tiers' => array(
                        // volume is in BTC
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00055') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00055') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00195') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00185') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00175') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00165') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00155') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00145') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00135') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00125') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00115') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00105') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00095') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00085') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00075') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00065') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00065') ),
                        ),
                    ),
                ),
                'swap' => array(
                    'tierBased' => true,
                    'feeSide' => 'base',
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0'),
                    'taker' => $this->parse_number('0.0005'),
                    'tiers' => array(
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0000') ),
                            array( $this->parse_number('1.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('6'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('12.5'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('25'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('75'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('200'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('1250'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('2500'), $this->parse_number('-0.00005') ),
                            array( $this->parse_number('3000'), $this->parse_number('-0.00008') ),
                            array( $this->parse_number('6000'), $this->parse_number('-0.01000') ),
                            array( $this->parse_number('11000'), $this->parse_number('-0.01002') ),
                            array( $this->parse_number('20000'), $this->parse_number('-0.01005') ),
                            array( $this->parse_number('40000'), $this->parse_number('-0.02000') ),
                            array( $this->parse_number('75000'), $this->parse_number('-0.02005') ),
                        ),
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.00050') ),
                            array( $this->parse_number('1.5'), $this->parse_number('0.00048') ),
                            array( $this->parse_number('3'), $this->parse_number('0.00046') ),
                            array( $this->parse_number('6'), $this->parse_number('0.00044') ),
                            array( $this->parse_number('12.5'), $this->parse_number('0.00042') ),
                            array( $this->parse_number('25'), $this->parse_number('0.00040') ),
                            array( $this->parse_number('75'), $this->parse_number('0.00038') ),
                            array( $this->parse_number('200'), $this->parse_number('0.00036') ),
                            array( $this->parse_number('500'), $this->parse_number('0.00034') ),
                            array( $this->parse_number('1250'), $this->parse_number('0.00032') ),
                            array( $this->parse_number('2500'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('3000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('6000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('11000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('20000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('40000'), $this->parse_number('0.00030') ),
                            array( $this->parse_number('75000'), $this->parse_number('0.00030') ),
                        ),
                    ),
                ),
            ),
            // https://www.gate.io/docs/apiv4/en/index.html#label-list
            'exceptions' => array(
                'INVALID_PARAM_VALUE' => '\\ccxt\\BadRequest',
                'INVALID_PROTOCOL' => '\\ccxt\\BadRequest',
                'INVALID_ARGUMENT' => '\\ccxt\\BadRequest',
                'INVALID_REQUEST_BODY' => '\\ccxt\\BadRequest',
                'MISSING_REQUIRED_PARAM' => '\\ccxt\\ArgumentsRequired',
                'BAD_REQUEST' => '\\ccxt\\BadRequest',
                'INVALID_CONTENT_TYPE' => '\\ccxt\\BadRequest',
                'NOT_ACCEPTABLE' => '\\ccxt\\BadRequest',
                'METHOD_NOT_ALLOWED' => '\\ccxt\\BadRequest',
                'NOT_FOUND' => '\\ccxt\\ExchangeError',
                'INVALID_CREDENTIALS' => '\\ccxt\\AuthenticationError',
                'INVALID_KEY' => '\\ccxt\\AuthenticationError',
                'IP_FORBIDDEN' => '\\ccxt\\AuthenticationError',
                'READ_ONLY' => '\\ccxt\\PermissionDenied',
                'INVALID_SIGNATURE' => '\\ccxt\\AuthenticationError',
                'MISSING_REQUIRED_HEADER' => '\\ccxt\\AuthenticationError',
                'REQUEST_EXPIRED' => '\\ccxt\\AuthenticationError',
                'ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                'FORBIDDEN' => '\\ccxt\\PermissionDenied',
                'SUB_ACCOUNT_NOT_FOUND' => '\\ccxt\\ExchangeError',
                'SUB_ACCOUNT_LOCKED' => '\\ccxt\\AccountSuspended',
                'MARGIN_BALANCE_EXCEPTION' => '\\ccxt\\ExchangeError',
                'MARGIN_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                'TOO_MUCH_FUTURES_AVAILABLE' => '\\ccxt\\ExchangeError',
                'FUTURES_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                'ACCOUNT_EXCEPTION' => '\\ccxt\\ExchangeError',
                'SUB_ACCOUNT_TRANSFER_FAILED' => '\\ccxt\\ExchangeError',
                'ADDRESS_NOT_USED' => '\\ccxt\\ExchangeError',
                'TOO_FAST' => '\\ccxt\\RateLimitExceeded',
                'WITHDRAWAL_OVER_LIMIT' => '\\ccxt\\ExchangeError',
                'API_WITHDRAW_DISABLED' => '\\ccxt\\ExchangeNotAvailable',
                'INVALID_WITHDRAW_ID' => '\\ccxt\\ExchangeError',
                'INVALID_WITHDRAW_CANCEL_STATUS' => '\\ccxt\\ExchangeError',
                'INVALID_PRECISION' => '\\ccxt\\InvalidOrder',
                'INVALID_CURRENCY' => '\\ccxt\\BadSymbol',
                'INVALID_CURRENCY_PAIR' => '\\ccxt\\BadSymbol',
                'POC_FILL_IMMEDIATELY' => '\\ccxt\\ExchangeError',
                'ORDER_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                'ORDER_CLOSED' => '\\ccxt\\InvalidOrder',
                'ORDER_CANCELLED' => '\\ccxt\\InvalidOrder',
                'QUANTITY_NOT_ENOUGH' => '\\ccxt\\InvalidOrder',
                'BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                'MARGIN_NOT_SUPPORTED' => '\\ccxt\\InvalidOrder',
                'MARGIN_BALANCE_NOT_ENOUGH' => '\\ccxt\\InsufficientFunds',
                'AMOUNT_TOO_LITTLE' => '\\ccxt\\InvalidOrder',
                'AMOUNT_TOO_MUCH' => '\\ccxt\\InvalidOrder',
                'REPEATED_CREATION' => '\\ccxt\\InvalidOrder',
                'LOAN_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                'LOAN_RECORD_NOT_FOUND' => '\\ccxt\\OrderNotFound',
                'NO_MATCHED_LOAN' => '\\ccxt\\ExchangeError',
                'NOT_MERGEABLE' => '\\ccxt\\ExchangeError',
                'NO_CHANGE' => '\\ccxt\\ExchangeError',
                'REPAY_TOO_MUCH' => '\\ccxt\\ExchangeError',
                'TOO_MANY_CURRENCY_PAIRS' => '\\ccxt\\InvalidOrder',
                'TOO_MANY_ORDERS' => '\\ccxt\\InvalidOrder',
                'MIXED_ACCOUNT_TYPE' => '\\ccxt\\InvalidOrder',
                'AUTO_BORROW_TOO_MUCH' => '\\ccxt\\ExchangeError',
                'TRADE_RESTRICTED' => '\\ccxt\\InsufficientFunds',
                'USER_NOT_FOUND' => '\\ccxt\\ExchangeError',
                'CONTRACT_NO_COUNTER' => '\\ccxt\\ExchangeError',
                'CONTRACT_NOT_FOUND' => '\\ccxt\\BadSymbol',
                'RISK_LIMIT_EXCEEDED' => '\\ccxt\\ExchangeError',
                'INSUFFICIENT_AVAILABLE' => '\\ccxt\\InsufficientFunds',
                'LIQUIDATE_IMMEDIATELY' => '\\ccxt\\InvalidOrder',
                'LEVERAGE_TOO_HIGH' => '\\ccxt\\InvalidOrder',
                'LEVERAGE_TOO_LOW' => '\\ccxt\\InvalidOrder',
                'ORDER_NOT_OWNED' => '\\ccxt\\ExchangeError',
                'ORDER_FINISHED' => '\\ccxt\\ExchangeError',
                'POSITION_CROSS_MARGIN' => '\\ccxt\\ExchangeError',
                'POSITION_IN_LIQUIDATION' => '\\ccxt\\ExchangeError',
                'POSITION_IN_CLOSE' => '\\ccxt\\ExchangeError',
                'POSITION_EMPTY' => '\\ccxt\\InvalidOrder',
                'REMOVE_TOO_MUCH' => '\\ccxt\\ExchangeError',
                'RISK_LIMIT_NOT_MULTIPLE' => '\\ccxt\\ExchangeError',
                'RISK_LIMIT_TOO_HIGH' => '\\ccxt\\ExchangeError',
                'RISK_LIMIT_TOO_lOW' => '\\ccxt\\ExchangeError',
                'PRICE_TOO_DEVIATED' => '\\ccxt\\InvalidOrder',
                'SIZE_TOO_LARGE' => '\\ccxt\\InvalidOrder',
                'SIZE_TOO_SMALL' => '\\ccxt\\InvalidOrder',
                'PRICE_OVER_LIQUIDATION' => '\\ccxt\\InvalidOrder',
                'PRICE_OVER_BANKRUPT' => '\\ccxt\\InvalidOrder',
                'ORDER_POC_IMMEDIATE' => '\\ccxt\\InvalidOrder',
                'INCREASE_POSITION' => '\\ccxt\\InvalidOrder',
                'CONTRACT_IN_DELISTING' => '\\ccxt\\ExchangeError',
                'INTERNAL' => '\\ccxt\\ExchangeError',
                'SERVER_ERROR' => '\\ccxt\\ExchangeError',
                'TOO_BUSY' => '\\ccxt\\ExchangeNotAvailable',
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        // :param $params['type'] => 'spot', 'margin', 'futures' or 'delivery'
        // :param $params['settle'] => The $quote currency
        $defaultType = $this->safe_string_2($this->options, 'fetchMarkets', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $spot = ($type === 'spot');
        $margin = ($type === 'margin');
        $futures = ($type === 'futures');
        $swap = ($type === 'swap');
        $option = ($type === 'option');
        if (!$spot && !$margin && !$futures && !$swap) {
            throw new ExchangeError($this->id . " does not support '" . $type . "' $type, set exchange.options['defaultType'] to " . "'spot', 'margin', 'swap' or 'futures'"); // eslint-disable-line quotes
        }
        $response = null;
        $result = array();
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'publicSpotGetCurrencyPairs',
            'margin' => 'publicMarginGetCurrencyPairs',
            'swap' => 'publicFuturesGetSettleContracts',
            'futures' => 'publicDeliveryGetSettleContracts',
        ));
        if ($futures || $swap) {
            $settlementCurrencies = $this->get_settlement_currencies($type, 'fetchMarkets');
            for ($c = 0; $c < count($settlementCurrencies); $c++) {
                $settle = $settlementCurrencies[$c];
                $query['settle'] = $settle;
                $response = yield $this->$method ($query);
                //  Perpetual $swap
                //      array(
                //          {
                //              "name" => "BTC_USDT",
                //              "$type" => "direct",
                //              "quanto_multiplier" => "0.0001",
                //              "ref_discount_rate" => "0",
                //              "order_price_deviate" => "0.5",
                //              "maintenance_rate" => "0.005",
                //              "mark_type" => "index",
                //              "last_price" => "38026",
                //              "mark_price" => "37985.6",
                //              "index_price" => "37954.92",
                //              "funding_rate_indicative" => "0.000219",
                //              "mark_price_round" => "0.01",
                //              "funding_offset" => 0,
                //              "in_delisting" => false,
                //              "risk_limit_base" => "1000000",
                //              "interest_rate" => "0.0003",
                //              "order_price_round" => "0.1",
                //              "order_size_min" => 1,
                //              "ref_rebate_rate" => "0.2",
                //              "funding_interval" => 28800,
                //              "risk_limit_step" => "1000000",
                //              "leverage_min" => "1",
                //              "leverage_max" => "100",
                //              "risk_limit_max" => "8000000",
                //              "maker_fee_rate" => "-0.00025",
                //              "taker_fee_rate" => "0.00075",
                //              "funding_rate" => "0.002053",
                //              "order_size_max" => 1000000,
                //              "funding_next_apply" => 1610035200,
                //              "short_users" => 977,
                //              "config_change_time" => 1609899548,
                //              "trade_size" => 28530850594,
                //              "position_size" => 5223816,
                //              "long_users" => 455,
                //              "funding_impact_value" => "60000",
                //              "orders_limit" => 50,
                //              "trade_id" => 10851092,
                //              "orderbook_id" => 2129638396
                //          }
                //      )
                //
                //  Delivery Futures
                //      array(
                //          {
                //            "name" => "BTC_USDT_20200814",
                //            "underlying" => "BTC_USDT",
                //            "cycle" => "WEEKLY",
                //            "$type" => "direct",
                //            "quanto_multiplier" => "0.0001",
                //            "mark_type" => "index",
                //            "last_price" => "9017",
                //            "mark_price" => "9019",
                //            "index_price" => "9005.3",
                //            "basis_rate" => "0.185095",
                //            "basis_value" => "13.7",
                //            "basis_impact_value" => "100000",
                //            "settle_price" => "0",
                //            "settle_price_interval" => 60,
                //            "settle_price_duration" => 1800,
                //            "settle_fee_rate" => "0.0015",
                //            "expire_time" => 1593763200,
                //            "order_price_round" => "0.1",
                //            "mark_price_round" => "0.1",
                //            "leverage_min" => "1",
                //            "leverage_max" => "100",
                //            "maintenance_rate" => "1000000",
                //            "risk_limit_base" => "140.726652109199",
                //            "risk_limit_step" => "1000000",
                //            "risk_limit_max" => "8000000",
                //            "maker_fee_rate" => "-0.00025",
                //            "taker_fee_rate" => "0.00075",
                //            "ref_discount_rate" => "0",
                //            "ref_rebate_rate" => "0.2",
                //            "order_price_deviate" => "0.5",
                //            "order_size_min" => 1,
                //            "order_size_max" => 1000000,
                //            "orders_limit" => 50,
                //            "orderbook_id" => 63,
                //            "trade_id" => 26,
                //            "trade_size" => 435,
                //            "position_size" => 130,
                //            "config_change_time" => 1593158867,
                //            "in_delisting" => false
                //          }
                //        )
                //
                for ($i = 0; $i < count($response); $i++) {
                    $market = $response[$i];
                    $id = $this->safe_string($market, 'name');
                    list($baseId, $quoteId, $date) = explode('_', $id);
                    $linear = strtolower($quoteId) === $settle;
                    $inverse = strtolower($baseId) === $settle;
                    $base = $this->safe_currency_code($baseId);
                    $quote = $this->safe_currency_code($quoteId);
                    $symbol = '';
                    if ($date) {
                        $symbol = $base . '/' . $quote . '-' . $date . ':' . $this->safe_currency_code($settle);
                    } else {
                        $symbol = $base . '/' . $quote . ':' . $this->safe_currency_code($settle);
                    }
                    $takerPercent = $this->safe_string($market, 'taker_fee_rate');
                    $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
                    $feeIndex = ($type === 'futures') ? 'swap' : $type;
                    $result[] = array(
                        'info' => $market,
                        'id' => $id,
                        'baseId' => $baseId,
                        'quoteId' => $quoteId,
                        'settleId' => $this->safe_symbol($settle),
                        'base' => $base,
                        'quote' => $quote,
                        'symbol' => $symbol,
                        'type' => $type,
                        'spot' => $spot,
                        'margin' => $margin,
                        'futures' => $futures,
                        'swap' => $swap,
                        'option' => $option,
                        'linear' => $linear,
                        'inverse' => $inverse,
                        // Fee is in %, so divide by 100
                        'taker' => $this->parse_number(Precise::string_div($takerPercent, '100')),
                        'maker' => $this->parse_number(Precise::string_div($makerPercent, '100')),
                        'contractSize' => $this->safe_string($market, 'contractSize', '1'),
                        'limits' => array(
                            'leverage' => array(
                                'max' => $this->safe_number($market, 'leverage_max'),
                            ),
                            'amount' => array(
                                'min' => $this->safe_number($market, 'order_size_min'),
                                'max' => $this->safe_number($market, 'order_size_max'),
                            ),
                        ),
                        'expiry' => $this->safe_integer($market, 'expire_time'),
                        'fees' => $this->safe_value($this->fees, $feeIndex, array()),
                    );
                }
            }
        } else {
            $response = yield $this->$method ($query);
            //
            //  Spot
            //      array(
            //           {
            //             "$id" => "DEGO_USDT",
            //             "$base" => "DEGO",
            //             "$quote" => "USDT",
            //             "fee" => "0.2",
            //             "min_quote_amount" => "1",
            //             "amount_precision" => "4",
            //             "precision" => "4",
            //             "trade_status" => "tradable",
            //             "sell_start" => "0",
            //             "buy_start" => "0"
            //           }
            //      )
            //
            //  Margin
            //      array(
            //         {
            //           "$id" => "ETH_USDT",
            //           "$base" => "ETH",
            //           "$quote" => "USDT",
            //           "leverage" => 3,
            //           "min_base_amount" => "0.01",
            //           "min_quote_amount" => "100",
            //           "max_quote_amount" => "1000000"
            //         }
            //       )
            //
            for ($i = 0; $i < count($response); $i++) {
                $market = $response[$i];
                $id = $this->safe_string($market, 'id');
                $spot = ($type === 'spot');
                $futures = ($type === 'futures');
                $swap = ($type === 'swap');
                $option = ($type === 'option');
                list($baseId, $quoteId) = explode('_', $id);
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $takerPercent = $this->safe_string($market, 'fee');
                $makerPercent = $this->safe_string($market, 'maker_fee_rate', $takerPercent);
                $amountPrecision = $this->safe_string($market, 'amount_precision');
                $pricePrecision = $this->safe_string($market, 'precision');
                $amountLimit = $this->parse_precision($amountPrecision);
                $priceLimit = $this->parse_precision($pricePrecision);
                $tradeStatus = $this->safe_string($market, 'trade_status');
                $result[] = array(
                    'info' => $market,
                    'id' => $id,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'base' => $base,
                    'quote' => $quote,
                    'symbol' => $symbol,
                    'type' => $type,
                    'spot' => $spot,
                    'margin' => $margin,
                    'futures' => $futures,
                    'swap' => $swap,
                    'option' => $option,
                    'linear' => false,
                    'inverse' => false,
                    // Fee is in %, so divide by 100
                    'taker' => $this->parse_number(Precise::string_div($takerPercent, '100')),
                    'maker' => $this->parse_number(Precise::string_div($makerPercent, '100')),
                    'precision' => array(
                        'amount' => intval($amountPrecision),
                        'price' => intval($pricePrecision),
                    ),
                    'active' => $tradeStatus === 'tradable',
                    'limits' => array(
                        'amount' => array(
                            'min' => $this->parse_number($amountLimit),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => $this->parse_number($priceLimit),
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => $this->safe_number($market, 'min_quote_amount'),
                            'max' => null,
                        ),
                        'leverage' => array(
                            'max' => $this->safe_number($market, 'lever', 1),
                        ),
                    ),
                );
            }
        }
        return $result;
    }

    public function prepare_request($market) {
        if ($market['type'] === 'futures' || $market['type'] === 'swap') {
            return array(
                'contract' => $market['id'],
                'settle' => $market['settleId'],
            );
        } else {
            return array(
                'currency_pair' => $market['id'],
            );
        }
    }

    public function get_settlement_currencies($type, $method) {
        $options = $this->safe_value($this->options, $type, array()); // array( 'BTC', 'USDT' ) unified codes
        $fetchMarketsContractOptions = $this->safe_value($options, $method, array());
        $defaultSettle = $type === 'swap' ? ['usdt'] : ['btc'];
        return $this->safe_value($fetchMarketsContractOptions, 'settlementCurrencies', $defaultSettle);
    }

    public function fetch_currencies($params = array ()) {
        $response = yield $this->publicSpotGetCurrencies ($params);
        //
        //     {
        //       "currency" => "BCN",
        //       "$delisted" => false,
        //       "$withdraw_disabled" => true,
        //       "withdraw_delayed" => false,
        //       "$deposit_disabled" => true,
        //       "$trade_disabled" => false
        //     }
        //
        $result = array();
        // TODO => remove magic constants
        $amountPrecision = 6;
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $delisted = $this->safe_value($entry, 'delisted');
            $withdraw_disabled = $this->safe_value($entry, 'withdraw_disabled');
            $deposit_disabled = $this->safe_value($entry, 'disabled_disabled');
            $trade_disabled = $this->safe_value($entry, 'trade_disabled');
            $active = !($delisted && $withdraw_disabled && $deposit_disabled && $trade_disabled);
            $result[$code] = array(
                'id' => $currencyId,
                'name' => null,
                'code' => $code,
                'precision' => $amountPrecision,
                'info' => $entry,
                'active' => $active,
                'fee' => null,
                'fees' => array(),
                'limits' => $this->limits,
            );
        }
        return $result;
    }

    public function fetch_funding_rate($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'contract' => $market['id'],
            'settle' => strtolower($market['quote']),
        );
        $response = yield $this->publicFuturesGetSettleContractsContract (array_merge($request, $params));
        //
        // array(
        //     {
        //       "name" => "BTC_USDT",
        //       "type" => "direct",
        //       "quanto_multiplier" => "0.0001",
        //       "ref_discount_rate" => "0",
        //       "order_price_deviate" => "0.5",
        //       "maintenance_rate" => "0.005",
        //       "mark_type" => "index",
        //       "last_price" => "38026",
        //       "mark_price" => "37985.6",
        //       "index_price" => "37954.92",
        //       "funding_rate_indicative" => "0.000219",
        //       "mark_price_round" => "0.01",
        //       "funding_offset" => 0,
        //       "in_delisting" => false,
        //       "risk_limit_base" => "1000000",
        //       "interest_rate" => "0.0003",
        //       "order_price_round" => "0.1",
        //       "order_size_min" => 1,
        //       "ref_rebate_rate" => "0.2",
        //       "funding_interval" => 28800,
        //       "risk_limit_step" => "1000000",
        //       "leverage_min" => "1",
        //       "leverage_max" => "100",
        //       "risk_limit_max" => "8000000",
        //       "maker_fee_rate" => "-0.00025",
        //       "taker_fee_rate" => "0.00075",
        //       "funding_rate" => "0.002053",
        //       "order_size_max" => 1000000,
        //       "funding_next_apply" => 1610035200,
        //       "short_users" => 977,
        //       "config_change_time" => 1609899548,
        //       "trade_size" => 28530850594,
        //       "position_size" => 5223816,
        //       "long_users" => 455,
        //       "funding_impact_value" => "60000",
        //       "orders_limit" => 50,
        //       "trade_id" => 10851092,
        //       "orderbook_id" => 2129638396
        //     }
        //   )
        //
        return $this->parse_funding_rate($response);
    }

    public function fetch_funding_rates($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $settle = $this->safe_string($params, 'settle');  // TODO => Save $settle in markets?
        $request = array(
            'settle' => strtolower($settle),
        );
        $response = yield $this->publicFuturesGetSettleContracts (array_merge($request, $params));
        //
        // array(
        //     {
        //       "name" => "BTC_USDT",
        //       "type" => "direct",
        //       "quanto_multiplier" => "0.0001",
        //       "ref_discount_rate" => "0",
        //       "order_price_deviate" => "0.5",
        //       "maintenance_rate" => "0.005",
        //       "mark_type" => "index",
        //       "last_price" => "38026",
        //       "mark_price" => "37985.6",
        //       "index_price" => "37954.92",
        //       "funding_rate_indicative" => "0.000219",
        //       "mark_price_round" => "0.01",
        //       "funding_offset" => 0,
        //       "in_delisting" => false,
        //       "risk_limit_base" => "1000000",
        //       "interest_rate" => "0.0003",
        //       "order_price_round" => "0.1",
        //       "order_size_min" => 1,
        //       "ref_rebate_rate" => "0.2",
        //       "funding_interval" => 28800,
        //       "risk_limit_step" => "1000000",
        //       "leverage_min" => "1",
        //       "leverage_max" => "100",
        //       "risk_limit_max" => "8000000",
        //       "maker_fee_rate" => "-0.00025",
        //       "taker_fee_rate" => "0.00075",
        //       "funding_rate" => "0.002053",
        //       "order_size_max" => 1000000,
        //       "funding_next_apply" => 1610035200,
        //       "short_users" => 977,
        //       "config_change_time" => 1609899548,
        //       "trade_size" => 28530850594,
        //       "position_size" => 5223816,
        //       "long_users" => 455,
        //       "funding_impact_value" => "60000",
        //       "orders_limit" => 50,
        //       "trade_id" => 10851092,
        //       "orderbook_id" => 2129638396
        //     }
        //   )
        //
        $result = $this->parse_funding_rates($response);
        return $this->filter_by_array($result, 'symbol', $symbols);
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        //     {
        //       "name" => "BTC_USDT",
        //       "type" => "direct",
        //       "quanto_multiplier" => "0.0001",
        //       "ref_discount_rate" => "0",
        //       "order_price_deviate" => "0.5",
        //       "maintenance_rate" => "0.005",
        //       "mark_type" => "index",
        //       "last_price" => "38026",
        //       "mark_price" => "37985.6",
        //       "index_price" => "37954.92",
        //       "funding_rate_indicative" => "0.000219",
        //       "mark_price_round" => "0.01",
        //       "funding_offset" => 0,
        //       "in_delisting" => false,
        //       "risk_limit_base" => "1000000",
        //       "interest_rate" => "0.0003",
        //       "order_price_round" => "0.1",
        //       "order_size_min" => 1,
        //       "ref_rebate_rate" => "0.2",
        //       "funding_interval" => 28800,
        //       "risk_limit_step" => "1000000",
        //       "leverage_min" => "1",
        //       "leverage_max" => "100",
        //       "risk_limit_max" => "8000000",
        //       "maker_fee_rate" => "-0.00025",
        //       "taker_fee_rate" => "0.00075",
        //       "funding_rate" => "0.002053",
        //       "order_size_max" => 1000000,
        //       "funding_next_apply" => 1610035200,
        //       "short_users" => 977,
        //       "config_change_time" => 1609899548,
        //       "trade_size" => 28530850594,
        //       "position_size" => 5223816,
        //       "long_users" => 455,
        //       "funding_impact_value" => "60000",
        //       "orders_limit" => 50,
        //       "trade_id" => 10851092,
        //       "orderbook_id" => 2129638396
        //     }
        //
        $marketId = $this->safe_string($contract, 'name');
        $symbol = $this->safe_symbol($marketId, $market);
        $markPrice = $this->safe_number($contract, 'mark_price');
        $indexPrice = $this->safe_number($contract, 'index_price');
        $interestRate = $this->safe_number($contract, 'interest_rate');
        $fundingRate = $this->safe_string($contract, 'funding_rate');
        $fundingInterval = $this->safe_string($contract, 'funding_interval') * 1000;
        $nextFundingTime = $this->safe_integer($contract, 'funding_next_apply') * 1000;
        $previousFundingTime = ($this->safe_number($contract, 'funding_next_apply') * 1000) - $fundingInterval;
        $fundingRateIndicative = $this->safe_number($contract, 'funding_rate_indicative');
        $timestamp = $this->milliseconds();
        return array(
            'info' => $contract,
            'symbol' => $symbol,
            'markPrice' => $markPrice,
            'indexPrice' => $indexPrice,
            'interestRate' => $interestRate,
            'estimatedSettlePrice' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'previousFundingRate' => $fundingRate,
            'nextFundingRate' => $fundingRateIndicative,
            'previousFundingTimestamp' => $previousFundingTime,
            'nextFundingTimestamp' => $nextFundingTime,
            'previousFundingDatetime' => $this->iso8601($previousFundingTime),
            'nextFundingDatetime' => $this->iso8601($nextFundingTime),
        );
    }

    public function fetch_network_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privateWalletGetDepositAddress (array_merge($request, $params));
        $addresses = $this->safe_value($response, 'multichain_addresses');
        $currencyId = $this->safe_string($response, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $result = array();
        for ($i = 0; $i < count($addresses); $i++) {
            $entry = $addresses[$i];
            //
            //     {
            //       "chain" => "ETH",
            //       "$address" => "0x359a697945E79C7e17b634675BD73B33324E9408",
            //       "payment_id" => "",
            //       "payment_name" => "",
            //       "obtain_failed" => "0"
            //     }
            //
            $obtainFailed = $this->safe_integer($entry, 'obtain_failed');
            if ($obtainFailed) {
                continue;
            }
            $network = $this->safe_string($entry, 'chain');
            $address = $this->safe_string($entry, 'address');
            $tag = $this->safe_string($entry, 'payment_id');
            $tagLength = is_array($tag) ? count($tag) : 0;
            $tag = $tagLength ? $tag : null;
            $result[$network] = array(
                'info' => $entry,
                'code' => $code,
                'address' => $address,
                'tag' => $tag,
            );
        }
        return $result;
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privateWalletGetDepositAddress (array_merge($request, $params));
        //
        //     {
        //       "$currency" => "XRP",
        //       "$address" => "rHcFoo6a9qT5NHiVn1THQRhsEGcxtYCV4d 391331007",
        //       "multichain_addresses" => array(
        //         {
        //           "chain" => "XRP",
        //           "$address" => "rHcFoo6a9qT5NHiVn1THQRhsEGcxtYCV4d",
        //           "payment_id" => "391331007",
        //           "payment_name" => "Tag",
        //           "obtain_failed" => 0
        //         }
        //       )
        //     }
        //
        $currencyId = $this->safe_string($response, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $addressField = $this->safe_string($response, 'address');
        $tag = null;
        $address = null;
        if (mb_strpos($addressField, ' ') !== false) {
            $splitted = explode(' ', $addressField);
            $address = $splitted[0];
            $tag = $splitted[1];
        } else {
            $address = $addressField;
        }
        return array(
            'info' => $response,
            'code' => $code,
            'address' => $address,
            'tag' => $tag,
        );
    }

    public function fetch_trading_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateWalletGetFee ($params);
        //
        //     {
        //       "user_id" => 1486602,
        //       "taker_fee" => "0.002",
        //       "maker_fee" => "0.002",
        //       "gt_discount" => true,
        //       "gt_taker_fee" => "0.0015",
        //       "gt_maker_fee" => "0.0015",
        //       "loan_fee" => "0.18",
        //       "point_type" => "0",
        //       "futures_taker_fee" => "0.0005",
        //       "futures_maker_fee" => "0"
        //     }
        //
        $result = array();
        $taker = $this->safe_number($response, 'taker_fee');
        $maker = $this->safe_number($response, 'maker_fee');
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $result[$symbol] = array(
                'maker' => $maker,
                'taker' => $taker,
                'info' => $response,
                'symbol' => $symbol,
            );
        }
        return $result;
    }

    public function fetch_funding_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateWalletGetWithdrawStatus ($params);
        //
        //     {
        //       "currency" => "MTN",
        //       "name" => "Medicalchain",
        //       "name_cn" => "Medicalchain",
        //       "deposit" => "0",
        //       "withdraw_percent" => "0%",
        //       "withdraw_fix" => "900",
        //       "withdraw_day_limit" => "500000",
        //       "withdraw_day_limit_remain" => "500000",
        //       "withdraw_amount_mini" => "900.1",
        //       "withdraw_eachtime_limit" => "90000000000",
        //       "withdraw_fix_on_chains" => {
        //         "ETH" => "900"
        //       }
        //     }
        //
        $withdrawFees = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $withdrawFees[$code] = array();
            $withdrawFix = $this->safe_value($entry, 'withdraw_fix_on_chains');
            if ($withdrawFix === null) {
                $withdrawFix = array();
                $withdrawFix[$code] = $this->safe_number($entry, 'withdraw_fix');
            }
            $keys = is_array($withdrawFix) ? array_keys($withdrawFix) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $key = $keys[$i];
                $withdrawFees[$code][$key] = $this->parse_number($withdrawFix[$key]);
            }
        }
        return array(
            'info' => $response,
            'withdraw' => $withdrawFees,
            'deposit' => array(),
        );
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        //
        //     $request = array(
        //         'currency_pair' => $market['id'],
        //         'interval' => '0', // depth, 0 means no aggregation is applied, default to 0
        //         'limit' => $limit, // maximum number of order depth data in asks or bids
        //         'with_id' => true, // return order book ID
        //     );
        //
        $request = $this->prepare_request($market);
        $spot = $market['spot'];
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetOrderBook',
            // 'margin' => 'publicMarginGetOrderBook',
            'swap' => 'publicFuturesGetSettleOrderBook',
            'futures' => 'publicDeliveryGetSettleOrderBook',
        ));
        if ($limit !== null) {
            $request['limit'] = $limit; // default 10, max 100
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        // SPOT
        //
        //     {
        //         "current" => 1634345973275,
        //         "update" => 1634345973271,
        //         "asks" => [
        //             ["2.2241","12449.827"],
        //             ["2.2242","200"],
        //             ["2.2244","826.931"],
        //             ["2.2248","3876.107"],
        //             ["2.225","2377.252"],
        //             ["2.22509","439.484"],
        //             ["2.2251","1489.313"],
        //             ["2.2253","714.582"],
        //             ["2.2254","1349.784"],
        //             ["2.2256","234.701"]],
        //          "bids":[
        //             ["2.2236","32.465"],
        //             ["2.2232","243.983"],
        //             ["2.2231","32.207"],
        //             ["2.223","449.827"],
        //             ["2.2228","7.918"],
        //             ["2.2227","12703.482"],
        //             ["2.2226","143.033"],
        //             ["2.2225","143.027"],
        //             ["2.2224","1369.352"],
        //             ["2.2223","756.063"]
        //         ]
        //     }
        //
        // Perpetual Swap
        //
        //     {
        //         "current" => 1634350208.745,
        //         "asks" => array(
        //             array("s":24909,"p":"61264.8"),
        //             array("s":81,"p":"61266.6"),
        //             array("s":2000,"p":"61267.6"),
        //             array("s":490,"p":"61270.2"),
        //             array("s":12,"p":"61270.4"),
        //             array("s":11782,"p":"61273.2"),
        //             array("s":14666,"p":"61273.3"),
        //             array("s":22541,"p":"61273.4"),
        //             array("s":33,"p":"61273.6"),
        //             array("s":11980,"p":"61274.5")
        //         ),
        //         "bids" => array(
        //             array("s":41844,"p":"61264.7"),
        //             array("s":13783,"p":"61263.3"),
        //             array("s":1143,"p":"61259.8"),
        //             array("s":81,"p":"61258.7"),
        //             array("s":2471,"p":"61257.8"),
        //             array("s":2471,"p":"61257.7"),
        //             array("s":2471,"p":"61256.5"),
        //             array("s":3,"p":"61254.2"),
        //             array("s":114,"p":"61252.4"),
        //             array("s":14372,"p":"61248.6")
        //         ),
        //         "update" => 1634350208.724
        //     }
        //
        $timestamp = $this->safe_integer($response, 'current');
        if (!$spot) {
            $timestamp = $timestamp * 1000;
        }
        $priceKey = $spot ? 0 : 'p';
        $amountKey = $spot ? 1 : 's';
        return $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks', $priceKey, $amountKey);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = $this->prepare_request($market);
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetTickers',
            // 'margin' => 'publicMarginGetTickers',
            'swap' => 'publicFuturesGetSettleTickers',
            'futures' => 'publicDeliveryGetSettleTickers',
        ));
        $response = yield $this->$method (array_merge($request, $params));
        $ticker = $this->safe_value($response, 0);
        return $this->parse_ticker($ticker, $market);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //  SPOT
        //
        //     {
        //         "currency_pair" => "KFC_USDT",
        //         "$last" => "7.255",
        //         "lowest_ask" => "7.298",
        //         "highest_bid" => "7.218",
        //         "change_percentage" => "-1.18",
        //         "base_volume" => "1219.053687865",
        //         "quote_volume" => "8807.40299875455",
        //         "high_24h" => "7.262",
        //         "low_24h" => "7.095"
        //     }
        //
        //  LINEAR/DELIVERY
        //
        //     {
        //         "contract" => "BTC_USDT",
        //         "$last" => "6432",
        //         "low_24h" => "6278",
        //         "high_24h" => "6790",
        //         "change_percentage" => "4.43",
        //         "total_size" => "32323904",
        //         "volume_24h" => "184040233284",
        //         "volume_24h_btc" => "28613220",
        //         "volume_24h_usd" => "184040233284",
        //         "volume_24h_base" => "28613220",
        //         "volume_24h_quote" => "184040233284",
        //         "volume_24h_settle" => "28613220",
        //         "mark_price" => "6534",
        //         "funding_rate" => "0.0001",
        //         "funding_rate_indicative" => "0.0001",
        //         "index_price" => "6531"
        //     }
        //
        $marketId = $this->safe_string_2($ticker, 'currency_pair', 'contract');
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_number($ticker, 'last');
        $ask = $this->safe_number($ticker, 'lowest_ask');
        $bid = $this->safe_number($ticker, 'highest_bid');
        $high = $this->safe_number($ticker, 'high_24h');
        $low = $this->safe_number($ticker, 'low_24h');
        $baseVolume = $this->safe_number($ticker, 'base_volume', 'volume_24h_base');
        $quoteVolume = $this->safe_number($ticker, 'quote_volume', 'volume_24h_quote');
        $percentage = $this->safe_number($ticker, 'change_percentage');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchTickers', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'publicSpotGetTickers',
            // 'margin' => 'publicMarginGetTickers',
            'swap' => 'publicFuturesGetSettleTickers',
            'futures' => 'publicDeliveryGetSettleTickers',
        ));
        $request = array();
        $futures = $type === 'futures';
        $swap = $type === 'swap';
        if (($swap || $futures) && !$params['settle']) {
            $request['settle'] = $swap ? 'usdt' : 'btc';
        }
        $response = yield $this->$method (array_merge($request, $params));
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_balance($params = array ()) {
        // :param $params->type => spot, margin, crossMargin, $swap or future
        // :param $params->settle => Settle currency (usdt or btc) for perpetual $swap and $futures
        yield $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'fetchBalance', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        $swap = $type === 'swap';
        $futures = $type === 'futures';
        $method = $this->get_supported_mapping($type, array(
            'spot' => 'privateSpotGetAccounts',
            // 'margin' => 'publicMarginGetTickers',
            'swap' => 'privateFuturesGetSettleAccounts',
            'futures' => 'privateDeliveryGetSettleAccounts',
        ));
        $request = array();
        $response = array();
        if ($swap || $futures) {
            $defaultSettle = $swap ? 'usdt' : 'btc';
            $request['settle'] = $this->safe_string($params, 'settle', $defaultSettle);
            $response_item = yield $this->$method (array_merge($request, $params));
            $response = [$response_item];
        } else {
            $response = yield $this->$method (array_merge($request, $params));
        }
        //  SPOT
        //     array(
        //       array(
        //         "currency" => "DBC",
        //         "available" => "0",
        //         "locked" => "0"
        //       ),
        //       ...
        //     )
        //
        //  Perpetual Swap
        //  {
        //     order_margin => "0",
        //     point => "0",
        //     bonus => "0",
        //     history => array(
        //       dnw => "2.1321",
        //       pnl => "11.5351",
        //       refr => "0",
        //       point_fee => "0",
        //       fund => "-0.32340576684",
        //       bonus_dnw => "0",
        //       point_refr => "0",
        //       bonus_offset => "0",
        //       fee => "-0.20132775",
        //       point_dnw => "0",
        //     ),
        //     unrealised_pnl => "13.315100000006",
        //     total => "12.51345151332",
        //     available => "0",
        //     in_dual_mode => false,
        //     currency => "USDT",
        //     position_margin => "12.51345151332",
        //     user => "6333333",
        //   }
        //
        //   Delivery Future
        //   {
        //     order_margin => "0",
        //     point => "0",
        //     history => array(
        //       dnw => "1",
        //       pnl => "0",
        //       refr => "0",
        //       point_fee => "0",
        //       point_dnw => "0",
        //       settle => "0",
        //       settle_fee => "0",
        //       point_refr => "0",
        //       fee => "0",
        //     ),
        //     unrealised_pnl => "0",
        //     total => "1",
        //     available => "1",
        //     currency => "USDT",
        //     position_margin => "0",
        //     user => "6333333",
        //   }
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $account = $this->account();
            $currencyId = $this->safe_string($entry, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account['used'] = $this->safe_string_2($entry, 'locked', 'position_margin');
            $account['free'] = $this->safe_string($entry, 'available');
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $price = $this->safe_string($params, 'price');
        $params = $this->omit($params, 'price');
        $isMark = ($price === 'mark');
        $isIndex = ($price === 'index');
        $futures = $market['futures'];
        $swap = $market['swap'];
        $request = array(
            'interval' => $this->timeframes[$timeframe],
        );
        if ($since === null) {
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
        } else {
            $request['from'] = intval($since / 1000);
            if ($limit !== null) {
                $request['to'] = $this->sum($request['from'], $limit * $this->parse_timeframe($timeframe) - 1);
            }
        }
        $method = 'publicSpotGetCandlesticks';
        if ($isMark || $isIndex || $futures || $swap) {
            $request['contract'] = $market['id'];
            if ($futures) {
                $method = 'publicDeliveryGetSettleCandlesticks';
            } else {
                $method = 'publicFuturesGetSettleCandlesticks';
            }
            $request['settle'] = $market['settleId'];
            if ($isMark) {
                $request['contract'] = 'mark_' . $request['contract'];
            } else if ($isIndex) {
                $request['contract'] = 'index_' . $request['contract'];
            }
        } else {
            $request['currency_pair'] = $market['id'];
        }
        $response = yield $this->$method (array_merge($request, $params));
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_mark_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $request = array(
            'price' => 'mark',
        );
        return yield $this->fetch_ohlcv($symbol, $timeframe, $since, $limit, array_merge($request, $params));
    }

    public function fetch_funding_rate_history($symbol = null, $limit = null, $since = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'contract' => $market['id'],
            'settle' => strtolower($market['quote']),
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $method = 'publicFuturesGetSettleFundingRate';
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     {
        //         "fundingRate" => "0.00063521",
        //         "fundingTime" => "1621267200000",
        //     }
        //
        $rates = array();
        for ($i = 0; $i < count($response); $i++) {
            $rates[] = array(
                'symbol' => $symbol,
                'fundingRate' => $this->safe_number($response[$i], 'r'),
                'timestamp' => $this->safe_number($response[$i], 't'),
            );
        }
        return $rates;
    }

    public function fetch_index_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $request = array(
            'price' => 'index',
        );
        return yield $this->fetch_ohlcv($symbol, $timeframe, $since, $limit, array_merge($request, $params));
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        // Spot $market candles
        //
        //     array(
        //         "1626163200",           // Unix timestamp in seconds
        //         "346711.933138181617",  // Trading volume
        //         "33165.23",             // Close price
        //         "33260",                // Highest price
        //         "33117.6",              // Lowest price
        //         "33184.47"              // Open price
        //     )
        //
        // Mark and Index price candles
        //
        //     {
        //          "t":1632873600,         // Unix timestamp in seconds
        //          "o":"41025",            // Open price
        //          "h":"41882.17",         // Highest price
        //          "c":"41776.92",         // Close price
        //          "l":"40783.94"          // Lowest price
        //     }
        //
        if (gettype($ohlcv) === 'array' && count(array_filter(array_keys($ohlcv), 'is_string')) == 0) {
            return array(
                $this->safe_timestamp($ohlcv, 0),   // unix timestamp in seconds
                $this->safe_number($ohlcv, 5),      // open price
                $this->safe_number($ohlcv, 3),      // highest price
                $this->safe_number($ohlcv, 4),      // lowest price
                $this->safe_number($ohlcv, 2),      // close price
                $this->safe_number($ohlcv, 1),      // trading volume
            );
        } else {
            // Mark and Index price candles
            return array(
                $this->safe_timestamp($ohlcv, 't'), // unix timestamp in seconds
                $this->safe_number($ohlcv, 'o'),    // open price
                $this->safe_number($ohlcv, 'h'),    // highest price
                $this->safe_number($ohlcv, 'l'),    // lowest price
                $this->safe_number($ohlcv, 'c'),    // close price
                $this->safe_number($ohlcv, 'v'),    // trading volume, null for mark or index price
            );
        }
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        //
        // spot
        //
        //     $request = array(
        //         'currency_pair' => $market['id'],
        //         'limit' => $limit, // maximum number of records to be returned in a single list
        //         'last_id' => 'id', // specify list staring point using the id of last record in previous list-query results
        //         'reverse' => false, // true to retrieve records where id is smaller than the specified last_id, false to retrieve records where id is larger than the specified last_id
        //     );
        //
        // swap, futures
        //
        //     $request = array(
        //         'settle' => $market['settleId'],
        //         'contract' => $market['id'],
        //         'limit' => $limit, // maximum number of records to be returned in a single list
        //         'last_id' => 'id', // specify list staring point using the id of last record in previous list-query results
        //         'from' => $since / 1000), // starting time in seconds, if not specified, to and $limit will be used to $limit $response items
        //         'to' => $this->seconds(), // end time in seconds, default to current time
        //     );
        //
        $request = $this->prepare_request($market);
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'publicSpotGetTrades',
            // 'margin' => 'publicMarginGetTickers',
            'swap' => 'publicFuturesGetSettleTrades',
            'futures' => 'publicDeliveryGetSettleTrades',
        ));
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        if ($since !== null && ($market['swap'] || $market['futures'])) {
            $request['from'] = intval($since / 1000);
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        // spot
        //
        //     array(
        //         {
        //             id => "1852958144",
        //             create_time => "1634673259",
        //             create_time_ms => "1634673259378.105000",
        //             currency_pair => "ADA_USDT",
        //             side => "sell",
        //             amount => "307.078",
        //             price => "2.104",
        //         }
        //     )
        //
        // perpetual swap
        //
        //     array(
        //         {
        //              size => "2",
        //              id => "2522911",
        //              create_time_ms => "1634673380.182",
        //              create_time => "1634673380.182",
        //              contract => "ADA_USDT",
        //              price => "2.10486",
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        //
        //     $request = array(
        //         'currency_pair' => $market['id'],
        //         // 'limit' => $limit,
        //         // 'page' => 0,
        //         // 'order_id' => 'Order ID',
        //         // 'account' => 'spot', // default to spot and margin account if not specified, set to cross_margin to operate against margin account
        //         // 'from' => $since, // default to 7 days before current time
        //         // 'to' => $this->milliseconds(), // default to current time
        //     );
        //
        $request = $this->prepare_request($market);
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000
        }
        if ($since !== null) {
            $request['from'] = intval($since / 1000);
            // $request['to'] = $since + 7 * 24 * 60 * 60;
        }
        $method = $this->get_supported_mapping($market['type'], array(
            'spot' => 'privateSpotGetMyTrades',
            // 'margin' => 'publicMarginGetCurrencyPairs',
            'swap' => 'privateFuturesGetSettleMyTrades',
            'futures' => 'privateDeliveryGetSettleMyTrades',
        ));
        $response = yield $this->$method (array_merge($request, $params));
        // SPOT
        // [array(
        //     id => "1851927191",
        //     create_time => "1634333360",
        //     create_time_ms => "1634333360359.901000",
        //     currency_pair => "BTC_USDT",
        //     side => "buy",
        //     role => "taker",
        //     amount => "0.0001",
        //     price => "62547.51",
        //     order_id => "93475897349",
        //     fee => "2e-07",
        //     fee_currency => "BTC",
        //     point_fee => "0",
        //     gt_fee => "0",
        //   )]
        // Perpetual Swap
        // [array(
        //   size => "-13",
        //   order_id => "79723658958",
        //   id => "47612669",
        //   role => "taker",
        //   create_time => "1634600263.326",
        //   contract => "BTC_USDT",
        //   price => "61987.8",
        // )]
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // public
        //
        //     {
        //         "$id" => "1334253759",
        //         "create_time" => "1626342738",
        //         "create_time_ms" => "1626342738331.497000",
        //         "currency_pair" => "BTC_USDT",
        //         "$side" => "sell",
        //         "$amount" => "0.0022",
        //         "$price" => "32452.16"
        //     }
        //
        // private
        //
        //     {
        //         "$id" => "218087755",
        //         "create_time" => "1578958740",
        //         "create_time_ms" => "1578958740122.710000",
        //         "currency_pair" => "BTC_USDT",
        //         "$side" => "sell",
        //         "role" => "taker",
        //         "$amount" => "0.0004",
        //         "$price" => "8112.77",
        //         "order_id" => "8445563839",
        //         "$fee" => "0.006490216",
        //         "fee_currency" => "USDT",
        //         "point_fee" => "0",
        //         "gt_fee" => "0"
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $timestampStringContract = $this->safe_string($trade, 'create_time');
        $timestampString = $this->safe_string_2($trade, 'create_time_ms', 'time', $timestampStringContract);
        $timestamp = null;
        if (mb_strpos($timestampString, '.') > 0) {
            $milliseconds = explode('.', $timestampString);
            $timestamp = intval($milliseconds[0]);
        }
        if ($market['swap']) {
            $timestamp = $timestamp * 1000;
        }
        $marketId = $this->safe_string_2($trade, 'currency_pair', 'contract');
        $symbol = $this->safe_symbol($marketId, $market);
        $amountString = $this->safe_string_2($trade, 'amount', 'size');
        $priceString = $this->safe_string($trade, 'price');
        $costString = Precise::string_abs(Precise::string_mul($amountString, $priceString));
        $price = $this->parse_number($priceString);
        $cost = $this->parse_number($costString);
        $contractSide = Precise::string_lt($amountString, '0') ? 'sell' : 'buy';
        $amountString = Precise::string_abs($amountString);
        $amount = $this->parse_number($amountString);
        $side = $this->safe_string($trade, 'side', $contractSide);
        $orderId = $this->safe_string($trade, 'order_id');
        $gtFee = $this->safe_string($trade, 'gt_fee');
        $feeCurrency = null;
        $feeCost = null;
        if ($gtFee === '0') {
            $feeCurrency = $this->safe_string($trade, 'fee_currency');
            $feeCost = $this->safe_number($trade, 'fee');
        } else {
            $feeCurrency = 'GT';
            $feeCost = $this->parse_number($gtFee);
        }
        $fee = array(
            'cost' => $feeCost,
            'currency' => $feeCurrency,
        );
        $takerOrMaker = $this->safe_string($trade, 'role');
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['from'] = intval($since / 1000);
            $request['to'] = $since + 30 * 24 * 60 * 60;
        }
        $response = yield $this->privateWalletGetDeposits (array_merge($request, $params));
        return $this->parse_transactions($response, $currency);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['from'] = intval($since / 1000);
            $request['to'] = $since + 30 * 24 * 60 * 60;
        }
        $response = yield $this->privateWalletGetWithdrawals (array_merge($request, $params));
        return $this->parse_transactions($response, $currency);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'address' => $address,
            'amount' => $this->currency_to_precision($code, $amount),
        );
        if ($tag !== null) {
            $request['memo'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string_lower($networks, $network, $network); // handle ETH>ERC20 alias
        if ($network !== null) {
            $request['chain'] = $network;
            $params = $this->omit($params, 'network');
        }
        $response = yield $this->privateWithdrawalsPost (array_merge($request, $params));
        //
        //     {
        //       "$id" => "w13389675",
        //       "$currency" => "USDT",
        //       "$amount" => "50",
        //       "$address" => "TUu2rLFrmzUodiWfYki7QCNtv1akL682p1",
        //       "memo" => null
        //     }
        //
        $currencyId = $this->safe_string($response, 'currency');
        $id = $this->safe_string($response, 'id');
        return array(
            'info' => $response,
            'id' => $id,
            'code' => $this->safe_currency_code($currencyId),
            'amount' => $this->safe_number($response, 'amount'),
            'address' => $this->safe_string($response, 'address'),
            'tag' => $this->safe_string($response, 'memo'),
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'PEND' => 'pending',
            'REQUEST' => 'pending',
            'DMOVE' => 'pending',
            'CANCEL' => 'failed',
            'DONE' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'd' => 'deposit',
            'w' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // deposits
        //
        //     {
        //       "$id" => "d33361395",
        //       "$currency" => "USDT_TRX",
        //       "$address" => "TErdnxenuLtXfnMafLbfappYdHtnXQ5U4z",
        //       "$amount" => "100",
        //       "$txid" => "ae9374de34e558562fe18cbb1bf9ab4d9eb8aa7669d65541c9fa2a532c1474a0",
        //       "$timestamp" => "1626345819",
        //       "$status" => "DONE",
        //       "memo" => ""
        //     }
        //
        // withdrawals
        $id = $this->safe_string($transaction, 'id');
        $type = null;
        if ($id !== null) {
            $type = $this->parse_transaction_type($id[0]);
        }
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $amount = $this->safe_number($transaction, 'amount');
        $txid = $this->safe_string($transaction, 'txid');
        $rawStatus = $this->safe_string($transaction, 'status');
        $status = $this->parse_transaction_status($rawStatus);
        $address = $this->safe_string($transaction, 'address');
        $fee = $this->safe_number($transaction, 'fee');
        $tag = $this->safe_string($transaction, 'memo');
        if ($tag === '') {
            $tag = null;
        }
        $timestamp = $this->safe_timestamp($transaction, 'timestamp');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'currency' => $code,
            'amount' => $amount,
            'address' => $address,
            'tag' => $tag,
            'status' => $status,
            'type' => $type,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => $fee,
        );
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'currency_pair' => $market['id'],
            'amount' => $this->amount_to_precision($symbol, $amount),
            'price' => $this->price_to_precision($symbol, $price),
            'side' => $side,
        );
        $response = yield $this->privateSpotPostOrders (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder
        //
        //     {
        //       "$id" => "62364648575",
        //       "text" => "apiv4",
        //       "create_time" => "1626354834",
        //       "update_time" => "1626354834",
        //       "create_time_ms" => "1626354833544",
        //       "update_time_ms" => "1626354833544",
        //       "$status" => "open",
        //       "currency_pair" => "BTC_USDT",
        //       "$type" => "limit",
        //       "account" => "spot",
        //       "$side" => "buy",
        //       "$amount" => "0.0001",
        //       "$price" => "30000",
        //       "time_in_force" => "gtc",
        //       "iceberg" => "0",
        //       "left" => "0.0001",
        //       "fill_price" => "0",
        //       "filled_total" => "0",
        //       "fee" => "0",
        //       "fee_currency" => "BTC",
        //       "point_fee" => "0",
        //       "gt_fee" => "0",
        //       "gt_discount" => true,
        //       "rebated_fee" => "0",
        //       "rebated_fee_currency" => "USDT"
        //     }
        //
        //
        $id = $this->safe_string($order, 'id');
        $marketId = $this->safe_string($order, 'currency_pair');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_timestamp($order, 'create_time');
        $timestamp = $this->safe_integer($order, 'create_time_ms', $timestamp);
        $lastTradeTimestamp = $this->safe_timestamp($order, 'update_time');
        $lastTradeTimestamp = $this->safe_integer($order, 'update_time_ms', $lastTradeTimestamp);
        $amount = $this->safe_number($order, 'amount');
        $price = $this->safe_number($order, 'price');
        $remaining = $this->safe_number($order, 'left');
        $cost = $this->safe_number($order, 'filled_total'); // same as filled_price
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'type');
        // open, closed, cancelled - almost already ccxt unified!
        $status = $this->safe_string($order, 'status');
        if ($status === 'cancelled') {
            $status = 'canceled';
        }
        $timeInForce = $this->safe_string_upper($order, 'time_in_force');
        $fees = array();
        $fees[] = array(
            'currency' => 'GT',
            'cost' => $this->safe_number($order, 'gt_fee'),
        );
        $fees[] = array(
            'currency' => $this->safe_currency_code($this->safe_string($order, 'fee_currency')),
            'cost' => $this->safe_number($order, 'fee'),
        );
        $rebate = $this->safe_string($order, 'rebated_fee');
        $fees[] = array(
            'currency' => $this->safe_currency_code($this->safe_string($order, 'rebated_fee_currency')),
            'cost' => $this->parse_number(Precise::string_neg($rebate)),
        );
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'average' => null,
            'amount' => $amount,
            'cost' => $cost,
            'filled' => null,
            'remaining' => $remaining,
            'fee' => null,
            'fees' => $fees,
            'trades' => null,
            'info' => $order,
        ));
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'order_id' => $id,
            'currency_pair' => $market['id'],
        );
        $response = yield $this->privateSpotGetOrdersOrderId (array_merge($request, $params));
        return $this->parse_order($response, $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            $request = array(
                // 'page' => 1,
                // 'limit' => $limit,
                // 'account' => '', // spot/margin (default), cross_margin
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = yield $this->privateSpotGetOpenOrders (array_merge($request, $params));
            //
            //     array(
            //         {
            //             "currency_pair" => "ETH_BTC",
            //             "total" => 1,
            //             "$orders" => array(
            //                 array(
            //                     "id" => "12332324",
            //                     "text" => "t-123456",
            //                     "create_time" => "1548000000",
            //                     "update_time" => "1548000100",
            //                     "currency_pair" => "ETH_BTC",
            //                     "status" => "open",
            //                     "type" => "$limit",
            //                     "account" => "spot",
            //                     "side" => "buy",
            //                     "amount" => "1",
            //                     "price" => "5.00032",
            //                     "time_in_force" => "gtc",
            //                     "left" => "0.5",
            //                     "filled_total" => "2.50016",
            //                     "fee" => "0.005",
            //                     "fee_currency" => "ETH",
            //                     "point_fee" => "0",
            //                     "gt_fee" => "0",
            //                     "gt_discount" => false,
            //                     "rebated_fee" => "0",
            //                     "rebated_fee_currency" => "BTC"
            //                 }
            //             )
            //         ),
            //         ...
            //     )
            //
            $allOrders = array();
            for ($i = 0; $i < count($response); $i++) {
                $entry = $response[$i];
                $orders = $this->safe_value($entry, 'orders', array());
                $parsed = $this->parse_orders($orders, null, $since, $limit);
                $allOrders = $this->array_concat($allOrders, $parsed);
            }
            return $this->filter_by_since_limit($allOrders, $since, $limit);
        }
        return yield $this->fetch_orders_by_status('open', $symbol, $since, $limit, $params);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        return yield $this->fetch_orders_by_status('finished', $symbol, $since, $limit, $params);
    }

    public function fetch_orders_by_status($status, $symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrdersByStatus requires a $symbol argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'currency_pair' => $market['id'],
            'status' => $status,
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start'] = intval($since / 1000);
        }
        $response = yield $this->privateSpotGetOrders (array_merge($request, $params));
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrders requires a $symbol parameter');
        }
        $market = $this->market($symbol);
        $request = array(
            'order_id' => $id,
            'currency_pair' => $market['id'],
        );
        $response = yield $this->privateSpotDeleteOrdersOrderId (array_merge($request, $params));
        return $this->parse_order($response);
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
        $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
        if ($fromId === null) {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new ExchangeError($this->id . ' $fromAccount must be one of ' . implode(', ', $keys));
        }
        if ($toId === null) {
            $keys = is_array($accountsByType) ? array_keys($accountsByType) : array();
            throw new ExchangeError($this->id . ' $toAccount must be one of ' . implode(', ', $keys));
        }
        $truncated = $this->currency_to_precision($code, $amount);
        $request = array(
            'currency' => $currency['id'],
            'from' => $fromId,
            'to' => $toId,
            'amount' => $truncated,
        );
        if (($toId === 'futures') || ($toId === 'delivery')) {
            $request['settle'] = $currency['id'];
        }
        $response = yield $this->privateWalletPostTransfers (array_merge($request, $params));
        //
        // according to the docs
        //
        //     {
        //       "$currency" => "BTC",
        //       "from" => "spot",
        //       "to" => "margin",
        //       "$amount" => "1",
        //       "currency_pair" => "BTC_USDT"
        //     }
        //
        // actual $response
        //
        //  POST https://api.gateio.ws/api/v4/wallet/transfers 204 No Content
        //
        return array(
            'info' => $response,
            'from' => $fromId,
            'to' => $toId,
            'amount' => $truncated,
            'code' => $code,
        );
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $authentication = $api[0]; // public, private
        $type = $api[1]; // spot, margin, futures, delivery
        $query = $this->omit($params, $this->extract_params($path));
        $path = $this->implode_params($path, $params);
        $endPart = ($path === '' ? '' : '/' . $path);
        $entirePath = '/' . $type . $endPart;
        $url = $this->urls['api'][$authentication] . $entirePath;
        $queryString = '';
        if ($authentication === 'public') {
            $queryString = $this->urlencode($query);
            if ($query) {
                $url .= '?' . $queryString;
            }
        } else {
            if (($method === 'GET') || ($method === 'DELETE')) {
                $queryString = $this->urlencode($query);
                if ($query) {
                    $url .= '?' . $queryString;
                }
            } else {
                $body = $this->json($query);
            }
            $bodyPayload = ($body === null) ? '' : $body;
            $bodySignature = $this->hash($this->encode($bodyPayload), 'sha512');
            $timestamp = $this->seconds();
            $timestampString = (string) $timestamp;
            $signaturePath = '/api/v4' . $entirePath;
            $payloadArray = array( strtoupper($method), $signaturePath, $queryString, $bodySignature, $timestampString );
            // eslint-disable-next-line quotes
            $payload = implode("\n", $payloadArray);
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret), 'sha512');
            $headers = array(
                'KEY' => $this->apiKey,
                'Timestamp' => $timestampString,
                'SIGN' => $signature,
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        $label = $this->safe_string($response, 'label');
        if ($label !== null) {
            $message = $this->safe_string_2($response, 'message', 'detail', '');
            $Error = $this->safe_value($this->exceptions, $label, '\\ccxt\\ExchangeError');
            throw new \Exception($this->id . ' ' . $message);
        }
    }
}
